++ Testing Through APIs

Testing through APIs refers to how TheSystem's APIs will have built-in test cases that integrate development with testing to reduce the chance of [Errors], increase [Standards] and design decisions.

++Implementation

All the potential errors caused by the API are determined by the [Developer] as it should be obvious what errors are possible from any given method. Each error is tested to see what happens. [Errors] that produce interfaces will invoke said interface generated by TheSystem or the application.

This essentially allows the developer to ask themselves: should this really happen? Is this what the user expects? Any user of an API will inherit some test cases that essentially ask the developer to confirm the reaction of the API.

This can be through questions and through plain text templates defined by the API developers. Any common gotchas or snags with the API call, defined by the CommunityNetwork or original developers can be displayed at this point.
    * Using GUI generation code will display an example GUI generated by the API but also a plain text description. "A toolbar spanning horizontally."
    * 


++Examples
The InternalErrorHandling routines used for FileHandling produce dialogs and require inputs from the user that may not be expected or appropriate for the situation.

A series of consecutively opened files has the following problems:
    * the testing environment and TheSystem cannot tell whether the files will open properly
    * developers will find it difficult to test every error condition with each file and what should happen.
    * any file open could cause an error
    * if none of the files exist, it's a sign of a larger problem, like an improper installation or files from the installation are missing
    * a large number of similar errors will cause a flurry of errors that must be handled
    * error merging or [MergedMultipleDisplay]s allow these errors to be concentrated
The solutions above work but they can be a result of a more internal design problems:
    * the development language does not specify the resources in a way that can be easily tested. Usually it is through a call to some API method
    * files that are absolutely necessary cannot be distinguished from the ones that are not
    * compaction of errors should not be the duty of the interface system
