<document>
<sam type="subs" name="Portalling.idea" template="ideaRecord.md" source="idea.md">
	<Title>Portalling</Title>
	<Description>Interfaces should be treated as 'landing portals' to information.</Description>
	<Idea>Portalling</Idea>
</sam>
<![CDATA[<div class="content Portalling">]]>
++ Portalling

Portals are specialized UserInterfaces that create an accurate portal to information.

    * Portalling uses the ObjectInterfacer to render.
    * Portalling is used extensively for [Bases].

A portal consists of SpecializedScreens and may be in SingleInterface form. This means [Links] are possible between them. Portals have [Navigation].

AbstractionAwareness is also important to [Portalling].  Adding a script entry to the [Clipboard] from a ListStyle row and pasting to a text editor would paste its sourcecode due to the RepresentationSystem. If pasted into the same portal it would instead add itself.

Portals can be shared with the [Sharer] with InterfaceSharing. The DesignedIn [Protocols] allow the efficient display and transfer of portals. There are two versions:
    * Active - a live [Network] connection is created and a list of portal contents is transmitted. When the recipient clicks on an item, its details are downloaded. This is the [Optimum] strategy that doesn't waste [Network] [Resources] for items that will not be viewed. TriggerAnything means that [Triggers] can be added to request the user's [Permissions]. 
    * Passive - all metadata is delivered to the recipient and the connection is closed.

This is all under UserRule and UserPower so that [Users] can block the transfer of certain items or more data.

Unless the recipient wishes to permanently store components of the portal, all data is stored in a SmartCache. This includes:
    * icons
    * images
    * 
AutoMapping adds certain information regarding [Users] OrganisationArchitecture by RelevancyHook]s.


portal sharing through [Sharer] - contents of entire portal or choose from a list (manual)
 - person needs contents of a portal either has to obtain them all via a service or from a single file

++Examples
    * Spotify is a very good example of a music portalling application.
    * List of Scripts/Timers/Variables on a HTML page
    * List of memory modules installed
    * per-game emulated data, number of enemies, items etc
    * Images on a web page - display them in order of size, group similarly sized images together
    * Browser uploads

<![CDATA[</div>]]>
<sam name="fulltable.md"/>
</document>
